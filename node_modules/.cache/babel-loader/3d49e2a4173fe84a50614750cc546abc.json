{"ast":null,"code":"import { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { toPublicUrl } from '../utils/request/toPublicUrl.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport { RequestHandler } from './RequestHandler.mjs';\n\nvar HttpMethods = /* @__PURE__ */(HttpMethods2 => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\n\nclass HttpHandler extends RequestHandler {\n  constructor(method, path, resolver, options) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n\n    if (path instanceof RegExp) {\n      return;\n    }\n\n    const url = cleanUrl(path);\n\n    if (url === path) {\n      return;\n    }\n\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/recipes/query-parameters`);\n  }\n\n  async parse(args) {\n    const url = new URL(args.request.url);\n    const match = matchRequestUrl(url, this.info.path, args.resolutionContext?.baseUrl);\n    const cookies = getAllRequestCookies(args.request);\n    return {\n      match,\n      cookies\n    };\n  }\n\n  predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n\n  extendResolverArgs(args) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n\n  async log(args) {\n    const publicUrl = toPublicUrl(args.request.url);\n    const loggedRequest = await serializeRequest(args.request);\n    const loggedResponse = await serializeResponse(args.response);\n    const statusColor = getStatusCodeColor(loggedResponse.status);\n    console.groupCollapsed(devUtils.formatMessage(`${getTimestamp()} ${args.request.method} ${publicUrl} (%c${loggedResponse.status} ${loggedResponse.statusText}%c)`), `color:${statusColor}`, \"color:inherit\");\n    console.log(\"Request\", loggedRequest);\n    console.log(\"Handler:\", this);\n    console.log(\"Response\", loggedResponse);\n    console.groupEnd();\n  }\n\n}\n\nexport { HttpHandler, HttpMethods };","map":{"version":3,"mappings":"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","names":["devUtils","isStringEqual","getStatusCodeColor","getTimestamp","serializeRequest","serializeResponse","matchRequestUrl","toPublicUrl","getAllRequestCookies","cleanUrl","getSearchParams","RequestHandler","HttpMethods","HttpHandler","constructor","method","path","resolver","options","info","header","checkRedundantQueryParameters","RegExp","url","searchParams","queryParams","forEach","_","paramName","push","warn","args","URL","request","match","resolutionContext","baseUrl","cookies","predicate","hasMatchingMethod","matchMethod","hasMatchingUrl","parsedResult","matches","actualMethod","test","extendResolverArgs","params","publicUrl","loggedRequest","loggedResponse","response","statusColor","status","console","groupCollapsed","formatMessage","statusText","log","groupEnd"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/handlers/HttpHandler.ts"],"sourcesContent":["import { ResponseResolutionContext } from '../utils/executeHandlers'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { serializeRequest } from '../utils/logging/serializeRequest'\nimport { serializeResponse } from '../utils/logging/serializeResponse'\nimport {\n  matchRequestUrl,\n  Match,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { toPublicUrl } from '../utils/request/toPublicUrl'\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies'\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype HttpHandlerMethod = string | RegExp\n\nexport interface HttpHandlerInfo extends RequestHandlerDefaultInfo {\n  method: HttpHandlerMethod\n  path: Path\n}\n\nexport enum HttpMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type HttpRequestParsedResult = {\n  match: Match\n  cookies: Record<string, string>\n}\n\nexport type HttpRequestResolverExtras<Params extends PathParams> = {\n  params: Params\n  cookies: Record<string, string>\n}\n\n/**\n * Request handler for HTTP requests.\n * Provides request matching based on method and URL.\n */\nexport class HttpHandler extends RequestHandler<\n  HttpHandlerInfo,\n  HttpRequestParsedResult,\n  HttpRequestResolverExtras<any>\n> {\n  constructor(\n    method: HttpHandlerMethod,\n    path: Path,\n    resolver: ResponseResolver<HttpRequestResolverExtras<any>, any, any>,\n    options?: RequestHandlerOptions,\n  ) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method,\n      },\n      resolver,\n      options,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (path instanceof RegExp) {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    const searchParams = getSearchParams(path)\n    const queryParams: string[] = []\n\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName)\n    })\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/recipes/query-parameters`,\n    )\n  }\n\n  async parse(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }) {\n    const url = new URL(args.request.url)\n    const match = matchRequestUrl(\n      url,\n      this.info.path,\n      args.resolutionContext?.baseUrl,\n    )\n    const cookies = getAllRequestCookies(args.request)\n\n    return {\n      match,\n      cookies,\n    }\n  }\n\n  predicate(args: { request: Request; parsedResult: HttpRequestParsedResult }) {\n    const hasMatchingMethod = this.matchMethod(args.request.method)\n    const hasMatchingUrl = args.parsedResult.match.matches\n    return hasMatchingMethod && hasMatchingUrl\n  }\n\n  private matchMethod(actualMethod: string): boolean {\n    return this.info.method instanceof RegExp\n      ? this.info.method.test(actualMethod)\n      : isStringEqual(this.info.method, actualMethod)\n  }\n\n  protected extendResolverArgs(args: {\n    request: Request\n    parsedResult: HttpRequestParsedResult\n  }) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies,\n    }\n  }\n\n  async log(args: { request: Request; response: Response }) {\n    const publicUrl = toPublicUrl(args.request.url)\n    const loggedRequest = await serializeRequest(args.request)\n    const loggedResponse = await serializeResponse(args.response)\n    const statusColor = getStatusCodeColor(loggedResponse.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage(\n        `${getTimestamp()} ${args.request.method} ${publicUrl} (%c${\n          loggedResponse.status\n        } ${loggedResponse.statusText}%c)`,\n      ),\n      `color:${statusColor}`,\n      'color:inherit',\n    )\n    console.log('Request', loggedRequest)\n    console.log('Handler:', this)\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}