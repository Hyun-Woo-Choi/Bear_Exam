{"ast":null,"code":"function isIterable(fn) {\n  if (!fn) {\n    return false;\n  }\n\n  return Reflect.has(fn, Symbol.iterator) || Reflect.has(fn, Symbol.asyncIterator);\n}\n\nexport { isIterable };","map":{"version":3,"mappings":"AAmBO,SAASA,UAAT,CACLC,EADK,EAIqD;EAC1D,IAAI,CAACA,EAAL,EAAS;IACP,OAAO,KAAP;EACF;;EAEA,OACEC,QAAQC,GAAR,CAAYF,EAAZ,EAAgBG,OAAOC,QAAvB,KAAoCH,QAAQC,GAAR,CAAYF,EAAZ,EAAgBG,OAAOE,aAAvB,CADtC;AAGF","names":["isIterable","fn","Reflect","has","Symbol","iterator","asyncIterator"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/utils/internal/isIterable.ts"],"sourcesContent":["/**\n * This is the same as TypeScript's `Iterable`, but with all three type parameters.\n * @todo Remove once TypeScript 5.6 is the minimum.\n */\nexport interface Iterable<T, TReturn, TNext> {\n  [Symbol.iterator](): Iterator<T, TReturn, TNext>\n}\n\n/**\n * This is the same as TypeScript's `AsyncIterable`, but with all three type parameters.\n * @todo Remove once TypeScript 5.6 is the minimum.\n */\nexport interface AsyncIterable<T, TReturn, TNext> {\n  [Symbol.asyncIterator](): AsyncIterator<T, TReturn, TNext>\n}\n\n/**\n * Determines if the given function is an iterator.\n */\nexport function isIterable<IteratorType>(\n  fn: any,\n): fn is\n  | Iterable<IteratorType, IteratorType, IteratorType>\n  | AsyncIterable<IteratorType, IteratorType, IteratorType> {\n  if (!fn) {\n    return false\n  }\n\n  return (\n    Reflect.has(fn, Symbol.iterator) || Reflect.has(fn, Symbol.asyncIterator)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}