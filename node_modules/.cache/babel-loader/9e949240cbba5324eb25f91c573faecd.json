{"ast":null,"code":"// src/glossary.ts\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\"); // src/utils/isPropertyAccessible.ts\n\nfunction isPropertyAccessible(obj, key) {\n  try {\n    obj[key];\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // src/utils/responseUtils.ts\n\n\nvar RESPONSE_STATUS_CODES_WITHOUT_BODY = /* @__PURE__ */new Set([101, 103, 204, 205, 304]);\n\nfunction isResponseWithoutBody(status) {\n  return RESPONSE_STATUS_CODES_WITHOUT_BODY.has(status);\n}\n\nfunction createServerErrorResponse(body) {\n  return new Response(JSON.stringify(body instanceof Error ? {\n    name: body.name,\n    message: body.message,\n    stack: body.stack\n  } : body), {\n    status: 500,\n    statusText: \"Unhandled Exception\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction isResponseError(response) {\n  return isPropertyAccessible(response, \"type\") && response.type === \"error\";\n}\n\nexport { IS_PATCHED_MODULE, isResponseWithoutBody, createServerErrorResponse, isResponseError };","map":{"version":3,"mappings":";AAEO,IAAMA,oBAAmCC,OAAO,iBAAP,CAAzC,C;;ACMA,SAASC,oBAAT,CACLC,GADK,EAELC,GAFK,EAGL;EACA,IAAI;IACFD,IAAIC,GAAJ;IACA,OAAO,IAAP;EACF,CAHA,CAGA,OAAQC,CAAR,EAAE;IACA,OAAO,KAAP;EACF;AACF,C;;;ACZO,IAAMC,qCAAqC,mBAAIC,GAAJ,CAAQ,CACxD,GADwD,EACnD,GADmD,EAC9C,GAD8C,EACzC,GADyC,EACpC,GADoC,CAAR,CAA3C;;AAQA,SAASC,qBAAT,CAA+BC,MAA/B,EAAwD;EAC7D,OAAOH,mCAAmCI,GAAnC,CAAuCD,MAAvC,CAAP;AACF;;AAKO,SAASE,yBAAT,CAAmCC,IAAnC,EAA4D;EACjE,OAAO,IAAIC,QAAJ,CACLC,KAAKC,SAAL,CACEH,gBAAgBI,KAAhB,GACI;IACEC,MAAML,KAAKK,IADb;IAEEC,SAASN,KAAKM,OAFhB;IAGEC,OAAOP,KAAKO;EAHd,CADJ,GAMIP,IAPN,CADK,EAUL;IACEH,QAAQ,GADV;IAEEW,YAAY,qBAFd;IAGEC,SAAS;MACP,gBAAgB;IADT;EAHX,CAVK,CAAP;AAkBF;;AAUO,SAASC,eAAT,CACLC,QADK,EAEqC;EAC1C,OAAOrB,qBAAqBqB,QAArB,EAA+B,MAA/B,KAA0CA,SAASC,IAAT,KAAkB,OAAnE;AACF","names":["IS_PATCHED_MODULE","Symbol","isPropertyAccessible","obj","key","e","RESPONSE_STATUS_CODES_WITHOUT_BODY","Set","isResponseWithoutBody","status","has","createServerErrorResponse","body","Response","JSON","stringify","Error","name","message","stack","statusText","headers","isResponseError","response","type"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/@mswjs/interceptors/src/glossary.ts","/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/@mswjs/interceptors/src/utils/isPropertyAccessible.ts","/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/@mswjs/interceptors/src/utils/responseUtils.ts"],"sourcesContent":["import type { InteractiveRequest } from './utils/toInteractiveRequest'\n\nexport const IS_PATCHED_MODULE: unique symbol = Symbol('isPatchedModule')\n\nexport type RequestCredentials = 'omit' | 'include' | 'same-origin'\n\nexport type HttpRequestEventMap = {\n  request: [\n    args: {\n      request: InteractiveRequest\n      requestId: string\n    }\n  ]\n  response: [\n    args: {\n      response: Response\n      isMockedResponse: boolean\n      request: Request\n      requestId: string\n    }\n  ]\n  unhandledException: [\n    args: {\n      error: unknown\n      request: Request\n      requestId: string\n      controller: {\n        respondWith(response: Response): void\n        errorWith(error?: Error): void\n      }\n    }\n  ]\n}\n","/**\n * A function that validates if property access is possible on an object\n * without throwing. It returns `true` if the property access is possible\n * and `false` otherwise.\n *\n * Environments like miniflare will throw on property access on certain objects\n * like Request and Response, for unimplemented properties.\n */\nexport function isPropertyAccessible<Obj extends Record<string, any>>(\n  obj: Obj,\n  key: keyof Obj\n) {\n  try {\n    obj[key]\n    return true\n  } catch {\n    return false\n  }\n}\n","import { isPropertyAccessible } from './isPropertyAccessible'\n\n/**\n * Response status codes for responses that cannot have body.\n * @see https://fetch.spec.whatwg.org/#statuses\n */\nexport const RESPONSE_STATUS_CODES_WITHOUT_BODY = new Set([\n  101, 103, 204, 205, 304,\n])\n\n/**\n * Returns a boolean indicating whether the given response status\n * code represents a response that cannot have a body.\n */\nexport function isResponseWithoutBody(status: number): boolean {\n  return RESPONSE_STATUS_CODES_WITHOUT_BODY.has(status)\n}\n\n/**\n * Creates a generic 500 Unhandled Exception response.\n */\nexport function createServerErrorResponse(body: unknown): Response {\n  return new Response(\n    JSON.stringify(\n      body instanceof Error\n        ? {\n            name: body.name,\n            message: body.message,\n            stack: body.stack,\n          }\n        : body\n    ),\n    {\n      status: 500,\n      statusText: 'Unhandled Exception',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  )\n}\n\n/**\n * Checks if the given response is a `Response.error()`.\n *\n * @note Some environments, like Miniflare (Cloudflare) do not\n * implement the \"Response.type\" property and throw on its access.\n * Safely check if we can access \"type\" on \"Response\" before continuing.\n * @see https://github.com/mswjs/msw/issues/1834\n */\nexport function isResponseError(\n  response: Response\n): response is Response & { type: 'error' } {\n  return isPropertyAccessible(response, 'type') && response.type === 'error'\n}\n"]},"metadata":{},"sourceType":"module"}