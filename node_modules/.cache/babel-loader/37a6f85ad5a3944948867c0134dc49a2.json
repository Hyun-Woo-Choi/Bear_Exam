{"ast":null,"code":"import { invariant } from \"outvariant\";\nimport { Emitter } from \"strict-event-emitter\";\nimport { devUtils } from './utils/internal/devUtils.mjs';\nimport { pipeEvents } from './utils/internal/pipeEvents.mjs';\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray.mjs';\nimport { Disposable } from './utils/internal/Disposable.mjs';\n\nclass HandlersController {}\n\nclass InMemoryHandlersController {\n  constructor(initialHandlers) {\n    this.initialHandlers = initialHandlers;\n    this.handlers = [...initialHandlers];\n  }\n\n  handlers;\n\n  prepend(runtimeHandles) {\n    this.handlers.unshift(...runtimeHandles);\n  }\n\n  reset(nextHandlers) {\n    this.handlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n\n  currentHandlers() {\n    return this.handlers;\n  }\n\n}\n\nclass SetupApi extends Disposable {\n  handlersController;\n  emitter;\n  publicEmitter;\n  events;\n\n  constructor() {\n    super();\n\n    for (var _len = arguments.length, initialHandlers = new Array(_len), _key = 0; _key < _len; _key++) {\n      initialHandlers[_key] = arguments[_key];\n    }\n\n    invariant(this.validateHandlers(initialHandlers), devUtils.formatMessage(`Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`));\n    this.handlersController = new InMemoryHandlersController(initialHandlers);\n    this.emitter = new Emitter();\n    this.publicEmitter = new Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners();\n      this.publicEmitter.removeAllListeners();\n    });\n  }\n\n  validateHandlers(handlers) {\n    return handlers.every(handler => !Array.isArray(handler));\n  }\n\n  use() {\n    for (var _len2 = arguments.length, runtimeHandlers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      runtimeHandlers[_key2] = arguments[_key2];\n    }\n\n    invariant(this.validateHandlers(runtimeHandlers), devUtils.formatMessage(`Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`));\n    this.handlersController.prepend(runtimeHandlers);\n  }\n\n  restoreHandlers() {\n    this.handlersController.currentHandlers().forEach(handler => {\n      handler.isUsed = false;\n    });\n  }\n\n  resetHandlers() {\n    for (var _len3 = arguments.length, nextHandlers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      nextHandlers[_key3] = arguments[_key3];\n    }\n\n    this.handlersController.reset(nextHandlers);\n  }\n\n  listHandlers() {\n    return toReadonlyArray(this.handlersController.currentHandlers());\n  }\n\n  createLifeCycleEvents() {\n    var _this = this;\n\n    return {\n      on: function () {\n        return _this.publicEmitter.on(...arguments);\n      },\n      removeListener: function () {\n        return _this.publicEmitter.removeListener(...arguments);\n      },\n      removeAllListeners: function () {\n        return _this.publicEmitter.removeAllListeners(...arguments);\n      }\n    };\n  }\n\n}\n\nexport { HandlersController, InMemoryHandlersController, SetupApi };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAAmBC,OAAnB,QAAkC,sBAAlC;AAMA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,UAAT,QAA2B,iCAA3B;;AAEO,MAAeC,kBAAf,CAAkC;;AAMlC,MAAMC,0BAAN,CAA+D;EAGpEC,YAAoBC,eAApB,EAA4D;IAAxC;IAClB,KAAKC,QAAL,GAAgB,CAAC,GAAGD,eAAJ,CAAhB;EACF;;EAJQC;;EAMDC,QAAQC,cAAR,EAAqD;IAC1D,KAAKF,QAAL,CAAcG,OAAd,CAAsB,GAAGD,cAAzB;EACF;;EAEOE,MAAMC,YAAN,EAAiD;IACtD,KAAKL,QAAL,GACEK,aAAaC,MAAb,GAAsB,CAAtB,GAA0B,CAAC,GAAGD,YAAJ,CAA1B,GAA8C,CAAC,GAAG,KAAKN,eAAT,CADhD;EAEF;;EAEOQ,kBAAyC;IAC9C,OAAO,KAAKP,QAAZ;EACF;;AAlBoE;;AAwB/D,MAAeQ,QAAf,SAA4Db,UAA5D,CAAuE;EAClEc;EACSC;EACAC;EAEHC;;EAEhBd,cAAuD;IACrD;;IADqD,kCAAxCC,eAAwC;MAAxCA,eAAwC;IAAA;;IAGrDT,UACE,KAAKuB,gBAAL,CAAsBd,eAAtB,CADF,EAEEP,SAASsB,aAAT,CACE,6GADF,CAFF;IAOA,KAAKL,kBAAL,GAA0B,IAAIZ,0BAAJ,CAA+BE,eAA/B,CAA1B;IAEA,KAAKW,OAAL,GAAe,IAAInB,OAAJ,EAAf;IACA,KAAKoB,aAAL,GAAqB,IAAIpB,OAAJ,EAArB;IACAE,WAAW,KAAKiB,OAAhB,EAAyB,KAAKC,aAA9B;IAEA,KAAKC,MAAL,GAAc,KAAKG,qBAAL,EAAd;IAEA,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,MAAM;MAC5B,KAAKP,OAAL,CAAaQ,kBAAb;MACA,KAAKP,aAAL,CAAmBO,kBAAnB;IACD,CAHD;EAIF;;EAEQL,iBAAiBb,QAAjB,EAAmE;IAEzE,OAAOA,SAASmB,KAAT,CAAgBC,OAAD,IAAa,CAACC,MAAMC,OAAN,CAAcF,OAAd,CAA7B,CAAP;EACF;;EAEOG,MAAqD;IAAA,mCAA9CC,eAA8C;MAA9CA,eAA8C;IAAA;;IAC1DlC,UACE,KAAKuB,gBAAL,CAAsBW,eAAtB,CADF,EAEEhC,SAASsB,aAAT,CACE,gIADF,CAFF;IAOA,KAAKL,kBAAL,CAAwBR,OAAxB,CAAgCuB,eAAhC;EACF;;EAEOC,kBAAwB;IAC7B,KAAKhB,kBAAL,CAAwBF,eAAxB,GAA0CmB,OAA1C,CAAmDN,OAAD,IAAa;MAC7DA,QAAQO,MAAR,GAAiB,KAAjB;IACD,CAFD;EAGF;;EAEOC,gBAA4D;IAAA,mCAA3CvB,YAA2C;MAA3CA,YAA2C;IAAA;;IACjE,KAAKI,kBAAL,CAAwBL,KAAxB,CAA8BC,YAA9B;EACF;;EAEOwB,eAEL;IACA,OAAOnC,gBAAgB,KAAKe,kBAAL,CAAwBF,eAAxB,EAAhB,CAAP;EACF;;EAEQQ,wBAA0D;IAAA;;IAChE,OAAO;MACLe,IAAI,YAAoB;QACtB,OAAQ,MAAKnB,aAAL,CAAmBmB,EAAnB,CAA8B,YAA9B,CAAR;MACF,CAHK;MAILC,gBAAgB,YAAoB;QAClC,OAAQ,MAAKpB,aAAL,CAAmBoB,cAAnB,CAA0C,YAA1C,CAAR;MACF,CANK;MAOLb,oBAAoB,YAAoB;QACtC,OAAO,MAAKP,aAAL,CAAmBO,kBAAnB,CAAsC,YAAtC,CAAP;MACF;IATK,CAAP;EAWF;;AA3E4E","names":["invariant","Emitter","devUtils","pipeEvents","toReadonlyArray","Disposable","HandlersController","InMemoryHandlersController","constructor","initialHandlers","handlers","prepend","runtimeHandles","unshift","reset","nextHandlers","length","currentHandlers","SetupApi","handlersController","emitter","publicEmitter","events","validateHandlers","formatMessage","createLifeCycleEvents","subscriptions","push","removeAllListeners","every","handler","Array","isArray","use","runtimeHandlers","restoreHandlers","forEach","isUsed","resetHandlers","listHandlers","on","removeListener"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/SetupApi.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n} from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\n\nexport abstract class HandlersController {\n  abstract prepend(runtimeHandlers: Array<RequestHandler>): void\n  abstract reset(nextHandles: Array<RequestHandler>): void\n  abstract currentHandlers(): Array<RequestHandler>\n}\n\nexport class InMemoryHandlersController implements HandlersController {\n  private handlers: Array<RequestHandler>\n\n  constructor(private initialHandlers: Array<RequestHandler>) {\n    this.handlers = [...initialHandlers]\n  }\n\n  public prepend(runtimeHandles: Array<RequestHandler>): void {\n    this.handlers.unshift(...runtimeHandles)\n  }\n\n  public reset(nextHandlers: Array<RequestHandler>): void {\n    this.handlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public currentHandlers(): Array<RequestHandler> {\n    return this.handlers\n  }\n}\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected handlersController: HandlersController\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.handlersController = new InMemoryHandlersController(initialHandlers)\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<RequestHandler>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(...runtimeHandlers: Array<RequestHandler>): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.handlersController.prepend(runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      handler.isUsed = false\n    })\n  }\n\n  public resetHandlers(...nextHandlers: Array<RequestHandler>): void {\n    this.handlersController.reset(nextHandlers)\n  }\n\n  public listHandlers(): ReadonlyArray<\n    RequestHandler<RequestHandlerDefaultInfo, any, any>\n  > {\n    return toReadonlyArray(this.handlersController.currentHandlers())\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}