{"ast":null,"code":"import statuses from \"@bundled-es-modules/statuses\";\nimport { Headers as HeadersPolyfill } from \"headers-polyfill\";\nconst {\n  message\n} = statuses;\nconst kSetCookie = Symbol(\"kSetCookie\");\n\nfunction normalizeResponseInit() {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const status = init?.status || 200;\n  const statusText = init?.statusText || message[status] || \"\";\n  const headers = new Headers(init?.headers);\n  return { ...init,\n    headers,\n    status,\n    statusText\n  };\n}\n\nfunction decorateResponse(response, init) {\n  if (init.type) {\n    Object.defineProperty(response, \"type\", {\n      value: init.type,\n      enumerable: true,\n      writable: false\n    });\n  }\n\n  const responseCookies = init.headers.get(\"set-cookie\");\n\n  if (responseCookies) {\n    Object.defineProperty(response, kSetCookie, {\n      value: responseCookies,\n      enumerable: false,\n      writable: false\n    });\n\n    if (typeof document !== \"undefined\") {\n      const responseCookiePairs = HeadersPolyfill.prototype.getSetCookie.call(init.headers);\n\n      for (const cookieString of responseCookiePairs) {\n        document.cookie = cookieString;\n      }\n    }\n  }\n\n  return response;\n}\n\nexport { decorateResponse, kSetCookie, normalizeResponseInit };","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,8BAArB;AACA,SAASC,WAAWC,eAApB,QAA2C,kBAA3C;AAGA,MAAM;EAAEC;AAAF,IAAcH,QAApB;AAEO,MAAMI,aAAaC,OAAO,YAAP,CAAnB;;AAQA,SAASC,qBAAT,GAEsB;EAAA,IAD3BC,IAC2B,uEADF,EACE;EAC3B,MAAMC,SAASD,MAAMC,MAAN,IAAgB,GAA/B;EACA,MAAMC,aAAaF,MAAME,UAAN,IAAoBN,QAAQK,MAAR,CAApB,IAAuC,EAA1D;EACA,MAAME,UAAU,IAAIT,OAAJ,CAAYM,MAAMG,OAAlB,CAAhB;EAEA,OAAO,EACL,GAAGH,IADE;IAELG,OAFK;IAGLF,MAHK;IAILC;EAJK,CAAP;AAMF;;AAEO,SAASE,gBAAT,CACLC,QADK,EAELL,IAFK,EAGK;EAEV,IAAIA,KAAKM,IAAT,EAAe;IACbC,OAAOC,cAAP,CAAsBH,QAAtB,EAAgC,MAAhC,EAAwC;MACtCI,OAAOT,KAAKM,IAD0B;MAEtCI,YAAY,IAF0B;MAGtCC,UAAU;IAH4B,CAAxC;EAKF;;EAEA,MAAMC,kBAAkBZ,KAAKG,OAAL,CAAaU,GAAb,CAAiB,YAAjB,CAAxB;;EAEA,IAAID,eAAJ,EAAqB;IAKnBL,OAAOC,cAAP,CAAsBH,QAAtB,EAAgCR,UAAhC,EAA4C;MAC1CY,OAAOG,eADmC;MAE1CF,YAAY,KAF8B;MAG1CC,UAAU;IAHgC,CAA5C;;IAOA,IAAI,OAAOG,QAAP,KAAoB,WAAxB,EAAqC;MAMnC,MAAMC,sBAAsBpB,gBAAgBqB,SAAhB,CAA0BC,YAA1B,CAAuCC,IAAvC,CAC1BlB,KAAKG,OADqB,CAA5B;;MAIA,WAAWgB,YAAX,IAA2BJ,mBAA3B,EAAgD;QAG9CD,SAASM,MAAT,GAAkBD,YAAlB;MACF;IACF;EACF;;EAEA,OAAOd,QAAP;AACF","names":["statuses","Headers","HeadersPolyfill","message","kSetCookie","Symbol","normalizeResponseInit","init","status","statusText","headers","decorateResponse","response","type","Object","defineProperty","value","enumerable","writable","responseCookies","get","document","responseCookiePairs","prototype","getSetCookie","call","cookieString","cookie"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/utils/HttpResponse/decorators.ts"],"sourcesContent":["import statuses from '@bundled-es-modules/statuses'\nimport { Headers as HeadersPolyfill } from 'headers-polyfill'\nimport type { HttpResponseInit } from '../../HttpResponse'\n\nconst { message } = statuses\n\nexport const kSetCookie = Symbol('kSetCookie')\n\nexport interface HttpResponseDecoratedInit extends HttpResponseInit {\n  status: number\n  statusText: string\n  headers: Headers\n}\n\nexport function normalizeResponseInit(\n  init: HttpResponseInit = {},\n): HttpResponseDecoratedInit {\n  const status = init?.status || 200\n  const statusText = init?.statusText || message[status] || ''\n  const headers = new Headers(init?.headers)\n\n  return {\n    ...init,\n    headers,\n    status,\n    statusText,\n  }\n}\n\nexport function decorateResponse(\n  response: Response,\n  init: HttpResponseDecoratedInit,\n): Response {\n  // Allow to mock the response type.\n  if (init.type) {\n    Object.defineProperty(response, 'type', {\n      value: init.type,\n      enumerable: true,\n      writable: false,\n    })\n  }\n\n  const responseCookies = init.headers.get('set-cookie')\n\n  if (responseCookies) {\n    // Record the raw \"Set-Cookie\" response header provided\n    // in the HeadersInit. This is later used to store these cookies\n    // in cookie jar and return the right cookies in the \"cookies\"\n    // response resolver argument.\n    Object.defineProperty(response, kSetCookie, {\n      value: responseCookies,\n      enumerable: false,\n      writable: false,\n    })\n\n    // Cookie forwarding is only relevant in the browser.\n    if (typeof document !== 'undefined') {\n      // Write the mocked response cookies to the document.\n      // Use `headers-polyfill` to get the Set-Cookie header value correctly.\n      // This is an alternative until TypeScript 5.2\n      // and Node.js v20 become the minimum supported version\n      // and getSetCookie in Headers can be used directly.\n      const responseCookiePairs = HeadersPolyfill.prototype.getSetCookie.call(\n        init.headers,\n      )\n\n      for (const cookieString of responseCookiePairs) {\n        // No need to parse the cookie headers because it's defined\n        // as the valid cookie string to begin with.\n        document.cookie = cookieString\n      }\n    }\n  }\n\n  return response\n}\n"]},"metadata":{},"sourceType":"module"}