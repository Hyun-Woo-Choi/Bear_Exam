{"ast":null,"code":"import cookieUtils from \"@bundled-es-modules/cookie\";\nimport { cookieStore } from '../cookieStore.mjs';\n\nfunction getAllDocumentCookies() {\n  return cookieUtils.parse(document.cookie);\n}\n\nfunction getDocumentCookies(request) {\n  if (typeof document === \"undefined\" || typeof location === \"undefined\") {\n    return {};\n  }\n\n  switch (request.credentials) {\n    case \"same-origin\":\n      {\n        const requestUrl = new URL(request.url);\n        return location.origin === requestUrl.origin ? getAllDocumentCookies() : {};\n      }\n\n    case \"include\":\n      {\n        return getAllDocumentCookies();\n      }\n\n    default:\n      {\n        return {};\n      }\n  }\n}\n\nfunction getAllRequestCookies(request) {\n  const requestCookieHeader = request.headers.get(\"cookie\");\n  const cookiesFromHeaders = requestCookieHeader ? cookieUtils.parse(requestCookieHeader) : {};\n  const cookiesFromDocument = getDocumentCookies(request);\n\n  for (const name in cookiesFromDocument) {\n    request.headers.append(\"cookie\", cookieUtils.serialize(name, cookiesFromDocument[name]));\n  }\n\n  const cookiesFromStore = cookieStore.getCookiesSync(request.url);\n  const storedCookiesObject = Object.fromEntries(cookiesFromStore.map(cookie => [cookie.key, cookie.value]));\n\n  for (const cookie of cookiesFromStore) {\n    request.headers.append(\"cookie\", cookie.toString());\n  }\n\n  return { ...cookiesFromDocument,\n    ...storedCookiesObject,\n    ...cookiesFromHeaders\n  };\n}\n\nexport { getAllRequestCookies };","map":{"version":3,"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,SAASC,qBAAT,GAAiC;EAC/B,OAAOF,YAAYG,KAAZ,CAAkBC,SAASC,MAA3B,CAAP;AACF;;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAsE;EACpE,IAAI,OAAOH,QAAP,KAAoB,WAApB,IAAmC,OAAOI,QAAP,KAAoB,WAA3D,EAAwE;IACtE,OAAO,EAAP;EACF;;EAEA,QAAQD,QAAQE,WAAhB;IACE,KAAK,aAAL;MAAoB;QAClB,MAAMC,aAAa,IAAIC,GAAJ,CAAQJ,QAAQK,GAAhB,CAAnB;QAIA,OAAOJ,SAASK,MAAT,KAAoBH,WAAWG,MAA/B,GACHX,uBADG,GAEH,EAFJ;MAGF;;IAEA,KAAK,SAAL;MAAgB;QAEd,OAAOA,uBAAP;MACF;;IAEA;MAAS;QACP,OAAO,EAAP;MACF;EAlBF;AAoBF;;AAEO,SAASY,oBAAT,CAA8BP,OAA9B,EAAwE;EAM7E,MAAMQ,sBAAsBR,QAAQS,OAAR,CAAgBC,GAAhB,CAAoB,QAApB,CAA5B;EACA,MAAMC,qBAAqBH,sBACvBf,YAAYG,KAAZ,CAAkBY,mBAAlB,CADuB,GAEvB,EAFJ;EAIA,MAAMI,sBAAsBb,mBAAmBC,OAAnB,CAA5B;;EAGA,WAAWa,IAAX,IAAmBD,mBAAnB,EAAwC;IACtCZ,QAAQS,OAAR,CAAgBK,MAAhB,CACE,QADF,EAEErB,YAAYsB,SAAZ,CAAsBF,IAAtB,EAA4BD,oBAAoBC,IAApB,CAA5B,CAFF;EAIF;;EAEA,MAAMG,mBAAmBtB,YAAYuB,cAAZ,CAA2BjB,QAAQK,GAAnC,CAAzB;EACA,MAAMa,sBAAsBC,OAAOC,WAAP,CAC1BJ,iBAAiBK,GAAjB,CAAsBvB,MAAD,IAAY,CAACA,OAAOwB,GAAR,EAAaxB,OAAOyB,KAApB,CAAjC,CAD0B,CAA5B;;EAMA,WAAWzB,MAAX,IAAqBkB,gBAArB,EAAuC;IACrChB,QAAQS,OAAR,CAAgBK,MAAhB,CAAuB,QAAvB,EAAiChB,OAAO0B,QAAP,EAAjC;EACF;;EAEA,OAAO,EACL,GAAGZ,mBADE;IAEL,GAAGM,mBAFE;IAGL,GAAGP;EAHE,CAAP;AAKF","names":["cookieUtils","cookieStore","getAllDocumentCookies","parse","document","cookie","getDocumentCookies","request","location","credentials","requestUrl","URL","url","origin","getAllRequestCookies","requestCookieHeader","headers","get","cookiesFromHeaders","cookiesFromDocument","name","append","serialize","cookiesFromStore","getCookiesSync","storedCookiesObject","Object","fromEntries","map","key","value","toString"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/utils/request/getRequestCookies.ts"],"sourcesContent":["import cookieUtils from '@bundled-es-modules/cookie'\nimport { cookieStore } from '../cookieStore'\n\nfunction getAllDocumentCookies() {\n  return cookieUtils.parse(document.cookie)\n}\n\nfunction getDocumentCookies(request: Request): Record<string, string> {\n  if (typeof document === 'undefined' || typeof location === 'undefined') {\n    return {}\n  }\n\n  switch (request.credentials) {\n    case 'same-origin': {\n      const requestUrl = new URL(request.url)\n\n      // Return document cookies only when requested a resource\n      // from the same origin as the current document.\n      return location.origin === requestUrl.origin\n        ? getAllDocumentCookies()\n        : {}\n    }\n\n    case 'include': {\n      // Return all document cookies.\n      return getAllDocumentCookies()\n    }\n\n    default: {\n      return {}\n    }\n  }\n}\n\nexport function getAllRequestCookies(request: Request): Record<string, string> {\n  /**\n   * @note While the \"cookie\" header is a forbidden header field\n   * in the browser, you can read it in Node.js. We need to respect\n   * it for mocking in Node.js.\n   */\n  const requestCookieHeader = request.headers.get('cookie')\n  const cookiesFromHeaders = requestCookieHeader\n    ? cookieUtils.parse(requestCookieHeader)\n    : {}\n\n  const cookiesFromDocument = getDocumentCookies(request)\n\n  // Forward the document cookies to the request headers.\n  for (const name in cookiesFromDocument) {\n    request.headers.append(\n      'cookie',\n      cookieUtils.serialize(name, cookiesFromDocument[name]),\n    )\n  }\n\n  const cookiesFromStore = cookieStore.getCookiesSync(request.url)\n  const storedCookiesObject = Object.fromEntries(\n    cookiesFromStore.map((cookie) => [cookie.key, cookie.value]),\n  )\n\n  // Forward the raw stored cookies to request headers\n  // so they contain metadata like \"expires\", \"secure\", etc.\n  for (const cookie of cookiesFromStore) {\n    request.headers.append('cookie', cookie.toString())\n  }\n\n  return {\n    ...cookiesFromDocument,\n    ...storedCookiesObject,\n    ...cookiesFromHeaders,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}