{"ast":null,"code":"import { isObject } from './isObject.mjs';\n\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, _ref) => {\n    let [key, rightValue] = _ref;\n    const leftValue = result[key];\n\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n\nexport { mergeRight };","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;;AAMO,SAASC,UAAT,CACLC,IADK,EAELC,KAFK,EAGL;EACA,OAAOC,OAAOC,OAAP,CAAeF,KAAf,EAAsBG,MAAtB,CACL,CAACC,MAAD,WAA+B;IAAA,IAAtB,CAACC,GAAD,EAAMC,UAAN,CAAsB;IAC7B,MAAMC,YAAYH,OAAOC,GAAP,CAAlB;;IAEA,IAAIG,MAAMC,OAAN,CAAcF,SAAd,KAA4BC,MAAMC,OAAN,CAAcH,UAAd,CAAhC,EAA2D;MACzDF,OAAOC,GAAP,IAAcE,UAAUG,MAAV,CAAiBJ,UAAjB,CAAd;MACA,OAAOF,MAAP;IACF;;IAEA,IAAIP,SAASU,SAAT,KAAuBV,SAASS,UAAT,CAA3B,EAAiD;MAC/CF,OAAOC,GAAP,IAAcP,WAAWS,SAAX,EAAsBD,UAAtB,CAAd;MACA,OAAOF,MAAP;IACF;;IAEAA,OAAOC,GAAP,IAAcC,UAAd;IACA,OAAOF,MAAP;EACF,CAhBK,EAiBLH,OAAOU,MAAP,CAAc,EAAd,EAAkBZ,IAAlB,CAjBK,CAAP;AAmBF","names":["isObject","mergeRight","left","right","Object","entries","reduce","result","key","rightValue","leftValue","Array","isArray","concat","assign"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/utils/internal/mergeRight.ts"],"sourcesContent":["import { isObject } from './isObject'\n\n/**\n * Deeply merges two given objects with the right one\n * having a priority during property assignment.\n */\nexport function mergeRight(\n  left: Record<string, any>,\n  right: Record<string, any>,\n) {\n  return Object.entries(right).reduce(\n    (result, [key, rightValue]) => {\n      const leftValue = result[key]\n\n      if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n        result[key] = leftValue.concat(rightValue)\n        return result\n      }\n\n      if (isObject(leftValue) && isObject(rightValue)) {\n        result[key] = mergeRight(leftValue, rightValue)\n        return result\n      }\n\n      result[key] = rightValue\n      return result\n    },\n    Object.assign({}, left),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}