{"ast":null,"code":"import { getCallFrame } from '../utils/internal/getCallFrame.mjs';\nimport { isIterable } from '../utils/internal/isIterable.mjs';\n\nclass RequestHandler {\n  static cache = /* @__PURE__ */new WeakMap();\n  info;\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n\n  isUsed;\n  resolver;\n  resolverIterator;\n  resolverIteratorResult;\n  options;\n\n  constructor(args) {\n    this.resolver = args.resolver;\n    this.options = args.options;\n    const callFrame = getCallFrame(new Error());\n    this.info = { ...args.info,\n      callFrame\n    };\n    this.isUsed = false;\n  }\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n\n\n  async parse(_args) {\n    return {};\n  }\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n\n\n  async test(args) {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n  }\n\n  extendResolverArgs(_args) {\n    return {};\n  } // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n\n\n  cloneRequestOrGetFromCache(request) {\n    const existingClone = RequestHandler.cache.get(request);\n\n    if (typeof existingClone !== \"undefined\") {\n      return existingClone;\n    }\n\n    const clonedRequest = request.clone();\n    RequestHandler.cache.set(request, clonedRequest);\n    return clonedRequest;\n  }\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n\n\n  async run(args) {\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n\n    const requestClone = this.cloneRequestOrGetFromCache(args.request);\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    const shouldInterceptRequest = this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n\n    if (!shouldInterceptRequest) {\n      return null;\n    }\n\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n\n    this.isUsed = true;\n    const executeResolver = this.wrapResolver(this.resolver);\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult\n    });\n    const mockedResponsePromise = executeResolver({ ...resolverExtras,\n      requestId: args.requestId,\n      request: args.request\n    }).catch(errorOrResponse => {\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse;\n      }\n\n      throw errorOrResponse;\n    });\n    const mockedResponse = await mockedResponsePromise;\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult\n    });\n    return executionResult;\n  }\n\n  wrapResolver(resolver) {\n    return async info => {\n      if (!this.resolverIterator) {\n        const result = await resolver(info);\n\n        if (!isIterable(result)) {\n          return result;\n        }\n\n        this.resolverIterator = Symbol.iterator in result ? result[Symbol.iterator]() : result[Symbol.asyncIterator]();\n      }\n\n      this.isUsed = false;\n      const {\n        done,\n        value\n      } = await this.resolverIterator.next();\n      const nextResponse = await value;\n\n      if (nextResponse) {\n        this.resolverIteratorResult = nextResponse.clone();\n      }\n\n      if (done) {\n        this.isUsed = true;\n        return this.resolverIteratorResult?.clone();\n      }\n\n      return nextResponse;\n    };\n  }\n\n  createExecutionResult(args) {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult\n    };\n  }\n\n}\n\nexport { RequestHandler };","map":{"version":3,"mappings":"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","names":["getCallFrame","isIterable","RequestHandler","WeakMap","info","isUsed","resolver","resolverIterator","resolverIteratorResult","options","constructor","args","callFrame","Error","_args","parsedResult","parse","request","resolutionContext","predicate","extendResolverArgs","cloneRequestOrGetFromCache","existingClone","cache","get","clonedRequest","clone","set","once","requestClone","shouldInterceptRequest","executeResolver","wrapResolver","resolverExtras","mockedResponsePromise","requestId","catch","errorOrResponse","Response","mockedResponse","executionResult","createExecutionResult","response","result","Symbol","iterator","asyncIterator","done","value","next","nextResponse","handler"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/handlers/RequestHandler.ts"],"sourcesContent":["import { getCallFrame } from '../utils/internal/getCallFrame'\nimport {\n  AsyncIterable,\n  Iterable,\n  isIterable,\n} from '../utils/internal/isIterable'\nimport type { ResponseResolutionContext } from '../utils/executeHandlers'\nimport type { MaybePromise } from '../typeUtils'\nimport { StrictRequest, StrictResponse } from '..//HttpResponse'\n\nexport type DefaultRequestMultipartBody = Record<\n  string,\n  string | File | Array<string | File>\n>\n\nexport type DefaultBodyType =\n  | Record<string, any>\n  | DefaultRequestMultipartBody\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport type JsonBodyType =\n  | Record<string, any>\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport interface RequestHandlerDefaultInfo {\n  header: string\n}\n\nexport interface RequestHandlerInternalInfo {\n  callFrame?: string\n}\n\nexport type ResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType = undefined,\n> =\n  | ([ResponseBodyType] extends [undefined]\n      ? Response\n      : StrictResponse<ResponseBodyType>)\n  | undefined\n  | void\n\nexport type MaybeAsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<ResponseResolverReturnType<ResponseBodyType>>\n\nexport type AsyncResponseResolverReturnType<\n  ResponseBodyType extends DefaultBodyType,\n> = MaybePromise<\n  | ResponseResolverReturnType<ResponseBodyType>\n  | Iterable<\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>\n    >\n  | AsyncIterable<\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>,\n      MaybeAsyncResponseResolverReturnType<ResponseBodyType>\n    >\n>\n\nexport type ResponseResolverInfo<\n  ResolverExtraInfo extends Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n> = {\n  request: StrictRequest<RequestBodyType>\n  requestId: string\n} & ResolverExtraInfo\n\nexport type ResponseResolver<\n  ResolverExtraInfo extends Record<string, unknown> = Record<string, unknown>,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = undefined,\n> = (\n  info: ResponseResolverInfo<ResolverExtraInfo, RequestBodyType>,\n) => AsyncResponseResolverReturnType<ResponseBodyType>\n\nexport interface RequestHandlerArgs<\n  HandlerInfo,\n  HandlerOptions extends RequestHandlerOptions,\n> {\n  info: HandlerInfo\n  resolver: ResponseResolver<any>\n  options?: HandlerOptions\n}\n\nexport interface RequestHandlerOptions {\n  once?: boolean\n}\n\nexport interface RequestHandlerExecutionResult<\n  ParsedResult extends Record<string, unknown> | undefined,\n> {\n  handler: RequestHandler\n  parsedResult?: ParsedResult\n  request: Request\n  requestId: string\n  response?: Response\n}\n\nexport abstract class RequestHandler<\n  HandlerInfo extends RequestHandlerDefaultInfo = RequestHandlerDefaultInfo,\n  ParsedResult extends Record<string, any> | undefined = any,\n  ResolverExtras extends Record<string, unknown> = any,\n  HandlerOptions extends RequestHandlerOptions = RequestHandlerOptions,\n> {\n  static cache = new WeakMap<\n    StrictRequest<DefaultBodyType>,\n    StrictRequest<DefaultBodyType>\n  >()\n\n  public info: HandlerInfo & RequestHandlerInternalInfo\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n  public isUsed: boolean\n\n  protected resolver: ResponseResolver<ResolverExtras, any, any>\n  private resolverIterator?:\n    | Iterator<\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>\n      >\n    | AsyncIterator<\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>,\n        MaybeAsyncResponseResolverReturnType<any>\n      >\n  private resolverIteratorResult?: Response | StrictResponse<any>\n  private options?: HandlerOptions\n\n  constructor(args: RequestHandlerArgs<HandlerInfo, HandlerOptions>) {\n    this.resolver = args.resolver\n    this.options = args.options\n\n    const callFrame = getCallFrame(new Error())\n\n    this.info = {\n      ...args.info,\n      callFrame,\n    }\n\n    this.isUsed = false\n  }\n\n  /**\n   * Determine if the intercepted request should be mocked.\n   */\n  abstract predicate(args: {\n    request: Request\n    parsedResult: ParsedResult\n    resolutionContext?: ResponseResolutionContext\n  }): boolean\n\n  /**\n   * Print out the successfully handled request.\n   */\n  abstract log(args: {\n    request: Request\n    response: Response\n    parsedResult: ParsedResult\n  }): void\n\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  async parse(_args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<ParsedResult> {\n    return {} as ParsedResult\n  }\n\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n  public async test(args: {\n    request: Request\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<boolean> {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n  }\n\n  protected extendResolverArgs(_args: {\n    request: Request\n    parsedResult: ParsedResult\n  }): ResolverExtras {\n    return {} as ResolverExtras\n  }\n\n  // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n  private cloneRequestOrGetFromCache(\n    request: StrictRequest<DefaultBodyType>,\n  ): StrictRequest<DefaultBodyType> {\n    const existingClone = RequestHandler.cache.get(request)\n\n    if (typeof existingClone !== 'undefined') {\n      return existingClone\n    }\n\n    const clonedRequest = request.clone()\n    RequestHandler.cache.set(request, clonedRequest)\n\n    return clonedRequest\n  }\n\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  public async run(args: {\n    request: StrictRequest<any>\n    requestId: string\n    resolutionContext?: ResponseResolutionContext\n  }): Promise<RequestHandlerExecutionResult<ParsedResult> | null> {\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    // Clone the request.\n    // If this is the first time MSW handles this request, a fresh clone\n    // will be created and cached. Upon further handling of the same request,\n    // the request clone from the cache will be reused to prevent abundant\n    // \"abort\" listeners and save up resources on cloning.\n    const requestClone = this.cloneRequestOrGetFromCache(args.request)\n\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext,\n    })\n    const shouldInterceptRequest = this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext,\n    })\n\n    if (!shouldInterceptRequest) {\n      return null\n    }\n\n    // Re-check isUsed, in case another request hit this handler while we were\n    // asynchronously parsing the request.\n    if (this.isUsed && this.options?.once) {\n      return null\n    }\n\n    // Preemptively mark the handler as used.\n    // Generators will undo this because only when the resolver reaches the\n    // \"done\" state of the generator that it considers the handler used.\n    this.isUsed = true\n\n    // Create a response extraction wrapper around the resolver\n    // since it can be both an async function and a generator.\n    const executeResolver = this.wrapResolver(this.resolver)\n\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult,\n    })\n\n    const mockedResponsePromise = (\n      executeResolver({\n        ...resolverExtras,\n        requestId: args.requestId,\n        request: args.request,\n      }) as Promise<Response>\n    ).catch((errorOrResponse) => {\n      // Allow throwing a Response instance in a response resolver.\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse\n      }\n\n      // Otherwise, throw the error as-is.\n      throw errorOrResponse\n    })\n\n    const mockedResponse = await mockedResponsePromise\n\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult,\n    })\n\n    return executionResult\n  }\n\n  private wrapResolver(\n    resolver: ResponseResolver<ResolverExtras>,\n  ): ResponseResolver<ResolverExtras> {\n    return async (info): Promise<ResponseResolverReturnType<any>> => {\n      if (!this.resolverIterator) {\n        const result = await resolver(info)\n        if (!isIterable(result)) {\n          return result\n        }\n        this.resolverIterator =\n          Symbol.iterator in result\n            ? result[Symbol.iterator]()\n            : result[Symbol.asyncIterator]()\n      }\n\n      // Opt-out from marking this handler as used.\n      this.isUsed = false\n\n      const { done, value } = await this.resolverIterator.next()\n      const nextResponse = await value\n\n      if (nextResponse) {\n        this.resolverIteratorResult = nextResponse.clone()\n      }\n\n      if (done) {\n        // A one-time generator resolver stops affecting the network\n        // only after it's been completely exhausted.\n        this.isUsed = true\n\n        // Clone the previously stored response so it can be read\n        // when receiving it repeatedly from the \"done\" generator.\n        return this.resolverIteratorResult?.clone()\n      }\n\n      return nextResponse\n    }\n  }\n\n  private createExecutionResult(args: {\n    request: Request\n    requestId: string\n    parsedResult: ParsedResult\n    response?: Response\n  }): RequestHandlerExecutionResult<ParsedResult> {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}