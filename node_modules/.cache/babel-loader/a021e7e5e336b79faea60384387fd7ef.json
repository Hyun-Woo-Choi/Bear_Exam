{"ast":null,"code":"import { decorateResponse, normalizeResponseInit } from './utils/HttpResponse/decorators.mjs';\n\nclass HttpResponse extends Response {\n  constructor(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    super(body, responseInit);\n    decorateResponse(this, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n\n\n  static text(body, init) {\n    const responseInit = normalizeResponseInit(init);\n\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/plain\");\n    }\n\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", body ? new Blob([body]).size.toString() : \"0\");\n    }\n\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n\n\n  static json(body, init) {\n    const responseInit = normalizeResponseInit(init);\n\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/json\");\n    }\n\n    const responseText = JSON.stringify(body);\n\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", responseText ? new Blob([responseText]).size.toString() : \"0\");\n    }\n\n    return new HttpResponse(responseText, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n\n\n  static xml(body, init) {\n    const responseInit = normalizeResponseInit(init);\n\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/xml\");\n    }\n\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n\n\n  static arrayBuffer(body, init) {\n    const responseInit = normalizeResponseInit(init);\n\n    if (body && !responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", body.byteLength.toString());\n    }\n\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n\n\n  static formData(body, init) {\n    return new HttpResponse(body, normalizeResponseInit(init));\n  }\n\n}\n\nexport { HttpResponse };","map":{"version":3,"mappings":"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","names":["decorateResponse","normalizeResponseInit","HttpResponse","Response","constructor","body","init","responseInit","headers","has","set","Blob","size","toString","responseText","JSON","stringify","byteLength"],"sources":["/Users/hyunwoochoi/Downloads/fe-homework-main-0.1.2/node_modules/msw/src/core/HttpResponse.ts"],"sourcesContent":["import type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'\nimport type { NoInfer } from './typeUtils'\nimport {\n  decorateResponse,\n  normalizeResponseInit,\n} from './utils/HttpResponse/decorators'\n\nexport interface HttpResponseInit extends ResponseInit {\n  type?: ResponseType\n}\n\ndeclare const bodyType: unique symbol\n\nexport interface StrictRequest<BodyType extends DefaultBodyType>\n  extends Request {\n  json(): Promise<BodyType>\n}\n\n/**\n * Opaque `Response` type that supports strict body type.\n */\nexport interface StrictResponse<BodyType extends DefaultBodyType>\n  extends Response {\n  readonly [bodyType]: BodyType\n}\n\n/**\n * A drop-in replacement for the standard `Response` class\n * to allow additional features, like mocking the response `Set-Cookie` header.\n *\n * @example\n * new HttpResponse('Hello world', { status: 201 })\n * HttpResponse.json({ name: 'John' })\n * HttpResponse.formData(form)\n *\n * @see {@link https://mswjs.io/docs/api/http-response `HttpResponse` API reference}\n */\nexport class HttpResponse extends Response {\n  constructor(body?: BodyInit | null, init?: HttpResponseInit) {\n    const responseInit = normalizeResponseInit(init)\n    super(body, responseInit)\n    decorateResponse(this, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text<BodyType extends string>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/plain')\n    }\n\n    // Automatically set the \"Content-Length\" response header\n    // for non-empty text responses. This enforces consistency and\n    // brings mocked responses closer to production.\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        body ? new Blob([body]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(body, responseInit) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json<BodyType extends JsonBodyType>(\n    body?: NoInfer<BodyType> | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/json')\n    }\n\n    /**\n     * @note TypeScript is incorrect here.\n     * Stringifying undefined will return undefined.\n     */\n    const responseText = JSON.stringify(body) as string | undefined\n\n    if (!responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set(\n        'Content-Length',\n        responseText ? new Blob([responseText]).size.toString() : '0',\n      )\n    }\n\n    return new HttpResponse(\n      responseText,\n      responseInit,\n    ) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/xml')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body?: ArrayBuffer, init?: HttpResponseInit): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (body && !responseInit.headers.has('Content-Length')) {\n      responseInit.headers.set('Content-Length', body.byteLength.toString())\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body?: FormData, init?: HttpResponseInit): Response {\n    return new HttpResponse(body, normalizeResponseInit(init))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}